<?php

namespace Unoconv;

require_once dirname(__FILE__) . '/../../../src/Unoconv/Unoconv.php';

use Monolog\Logger;
use Symfony\Component\Process\ExecutableFinder;

/**
 * Test class for Unoconv.
 * Generated by PHPUnit on 2012-04-16 at 13:55:07.
 */
class UnoconvTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @covers Unoconv\Unoconv::__construct
     */
    public function testConstruct()
    {
        $Unoconv = Unoconv::load(new Logger('test'));
        $Unoconv = Unoconv::load();
    }

    /**
     * @covers Unoconv\Unoconv::open
     */
    public function testOpen()
    {
        $Unoconv = Unoconv::load();
        $Unoconv->open(__DIR__ . '/../../files/Hello.odt');
    }

    /**
     * @covers Unoconv\Unoconv::open
     * @expectedException \Unoconv\Exception\InvalidFileArgumentException
     */
    public function testOpenFail()
    {
        $Unoconv = Unoconv::load();
        $Unoconv->open(__DIR__ . '/../../files/invalid.file');
    }

    /**
     * @covers Unoconv\Unoconv::saveAs
     */
    public function testSaveAs()
    {
        $dest = __DIR__ . '/../../files/Hello.pdf';

        $Unoconv = Unoconv::load();
        $Unoconv->open(__DIR__ . '/../../files/Hello.odt')
            ->saveAs('pdf', $dest)
            ->close();

        $this->assertTrue(file_exists($dest));
        unlink($dest);
    }

    /**
     * @covers Unoconv\Unoconv::close
     * @expectedException Unoconv\Exception\LogicException
     */
    public function testClose()
    {
        $dest = __DIR__ . '/../../files/Hello.pdf';

        $Unoconv = Unoconv::load();
        $Unoconv->open(__DIR__ . '/../../files/Hello.odt')
            ->close()
            ->saveAs('pdf', $dest);
    }

    /**
     * @covers Unoconv\Unoconv::saveAs
     * @expectedException \Unoconv\Exception\RuntimeException
     */
    public function testSaveAsInvalidDest()
    {
        $dest = '/tmp/' . mt_rand(10000, 99999) . '/Hello.pdf';

        $Unoconv = Unoconv::load();
        $Unoconv->open(__DIR__ . '/../../files/Hello.odt');
        $Unoconv->saveAs('pdf', $dest);

        $this->assertTrue(file_exists($dest));
        unlink($dest);
    }

    /**
     * @covers Unoconv\Unoconv::saveAs
     * @expectedException \Unoconv\Exception\LogicException
     */
    public function testSaveAsWithoutFile()
    {
        $Unoconv = Unoconv::load();
        $Unoconv->saveAs('pdf', __DIR__ . '/../../files/Hello.pdf');
    }

    /**
     * @covers Unoconv\Unoconv::load
     */
    public function testLoad()
    {
        $Unoconv = Unoconv::load();
    }

    /**
     * @covers Unoconv\Unoconv::load
     */
    public function testCustomBinary()
    {
        $finder = new ExecutableFinder();

        if (null === $binary = $finder->find('unoconv')) {
            $this->markTestSkipped('Unable to find unoconv binary');
        }

        $Unoconv = new Unoconv($binary);
        $Unoconv = new Unoconv($binary, new Logger('test'));
    }

    /**
     * @covers Unoconv\Unoconv::load
     * @expectedException Unoconv\Exception\RuntimeException
     */
    public function testCustomBinaryFail()
    {
        $Unoconv = new Unoconv('/no/binary/here');
    }

    /**
     * @covers Unoconv\Unoconv::load
     * @expectedException Unoconv\Exception\RuntimeException
     */
    public function testCustomBinaryFailWithLogger()
    {
        $Unoconv = new Unoconv('/no/binary/here', new Logger('test'));
    }
}

